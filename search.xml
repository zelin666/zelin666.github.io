<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（一）</title>
      <link href="/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%B8%80)/"/>
      <url>/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需要下载的软件、环境"><a href="#安装所需要下载的软件、环境" class="headerlink" title="安装所需要下载的软件、环境"></a>安装所需要下载的软件、环境</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>点击<a href="https://nodejs.org/en/" title="Node.js官网" target="_blank" rel="noopener">此处</a>访问官网并下载最新版本的node.js。<br>直接一步一步向下安装就可以。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>点击<a href="https://git-scm.com" title="Git官网" target="_blank" rel="noopener">此处</a>访问官网并下载最新版本的Git。<br>也是直接一步一步向下安装就可以。</p><h3 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h3><p>1.在本地需要建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)</p><p>2.在文件空白处右键，点击Git Bash Here</p><p>3.点击后弹出git命令框，输入此命令下载hexo：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo</code></pre><p><strong>注意：</strong>（git命令框按Ctrl C 是停止服务，不要这样做。）</p><p>4.初始化hexo</p><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p>5.以下四步对建站进行了部署，在进行最后一步后访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以查看你的本地hexo访问页面了。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span>$ hexo g$ hexo d$ hexo server</code></pre><p><strong>到此需要下载的工作就进行完了</strong><br><strong>搭建个人博客 HEXO＋Node.Js（二）将进一步讲解如何进行接下来的搭建操作！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（三）</title>
      <link href="/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%B8%89)/"/>
      <url>/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建一些基础概念"><a href="#博客搭建一些基础概念" class="headerlink" title="博客搭建一些基础概念"></a>博客搭建一些基础概念</h2><h3 id="分类和标签的区别与联系"><a href="#分类和标签的区别与联系" class="headerlink" title="分类和标签的区别与联系"></a>分类和标签的区别与联系</h3><p><strong>分类和标签是博客系统的两项功能</strong></p><p>*<em>标签和分类的区别： *</em></p><p>1）同一篇文章标签可以用多个，但通常只能属于一个分类； </p><p>2）标签一般是在写作完成后，根据文章大意进行添加的；</p><p>3）标签可以把文章中重点词语提炼出来，有关键词的意义，但是分类没有； </p><p>4）标签通常反映了您的主要关注点，比如财经、互联网、体育等等； </p><p>5）标签给了我们一条联系他人的纽带，通过标签可以找到您的“同好” </p><h2 id="HEXO的基础命令语法"><a href="#HEXO的基础命令语法" class="headerlink" title="HEXO的基础命令语法"></a>HEXO的基础命令语法</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"title"</span></code></pre><p>当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md</p><p>这个文件就是将要发布到网站上的原始文件，用于记录文章内容。</p><h3 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h3><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p><strong>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。执行命令会在当前命令的路径下，生成以下文件：</strong></p><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">.</span>    ├── .deploy         //执行hexo deploy命令部署到GitHub上的内容目录    ├── public          //执行hexo generate命令，输出的静态网页内容目录    ├── scaffolds      //layout模板文件目录，其中的md文件可以添加编辑    ├── scripts        //扩展脚本目录，这里可以自定义一些javascript脚本    ├── <span class="token function">source</span>         //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。      <span class="token operator">|</span>   ├── _drafts    //草稿文章    <span class="token operator">|</span>   └── _posts     //发布文章    ├── themes          //主题文件目录    ├── _config.yml     //全局配置文件，大多数的设置都在这里    └── package.json     //应用程序数据，指明hexo的版本等信息</code></pre><h3 id="相关的命令"><a href="#相关的命令" class="headerlink" title="相关的命令"></a>相关的命令</h3><pre class=" language-bash"><code class="language-bash">    hexo new <span class="token string">"postName"</span>       <span class="token comment" spellcheck="true">#新建文章</span>    hexo new page <span class="token string">"pageName"</span>  <span class="token comment" spellcheck="true">#新建页面</span>    hexo generate             <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>    hexo server               <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>    hexo deploy               <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span></code></pre><h3 id="有的命令可以简写"><a href="#有的命令可以简写" class="headerlink" title="有的命令可以简写"></a>有的命令可以简写</h3><pre class=" language-bash"><code class="language-bash">    hexo n <span class="token operator">==</span> hexo new    hexo g <span class="token operator">==</span> hexo generate    hexo s <span class="token operator">==</span> hexo server    hexo d <span class="token operator">==</span> hexo deploy</code></pre><h3 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h3><pre class=" language-bash"><code class="language-bash">    <span class="token comment" spellcheck="true"># 生成完毕后自动部署网站</span>    $ hexo g -d</code></pre><h3 id="clean命令清除缓存"><a href="#clean命令清除缓存" class="headerlink" title="clean命令清除缓存"></a>clean命令清除缓存</h3><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成吧!</p><pre class=" language-bash"><code class="language-bash">   $ hexo clean</code></pre><h2 id="写页面的一些操作"><a href="#写页面的一些操作" class="headerlink" title="写页面的一些操作"></a>写页面的一些操作</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>井号代表标题，两井号代表大标题，依次向下类推，直到六个井号，代表六级标题。</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><pre class=" language-bash"><code class="language-bash">*斜体***粗体*****加粗斜体***~~删除线~~</code></pre><h3 id="头部设置"><a href="#头部设置" class="headerlink" title="头部设置"></a>头部设置</h3><pre class=" language-bash"><code class="language-bash">comments: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否可评论</span>toc: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否显示文章目录</span>categories: <span class="token string">"分类名称"</span> <span class="token comment" spellcheck="true">#分类（一个）</span>tags:   <span class="token comment" spellcheck="true">#标签</span>    - 标签名称    - 标签名称（多个）</code></pre><p><strong>这里就先介绍基本的问题与操作到这里</strong><br><strong>搭建个人博客 HEXO＋Node.Js（四）将进一步讲解本站主题相关的一些问题！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（二）</title>
      <link href="/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%BA%8C)/"/>
      <url>/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="配置将本地的hexo链接成网址，变成个人博客网站。"><a href="#配置将本地的hexo链接成网址，变成个人博客网站。" class="headerlink" title="配置将本地的hexo链接成网址，变成个人博客网站。"></a>配置将本地的hexo链接成网址，变成个人博客网站。</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p> 1.点击<a href="https://github.com" title="Github官网" target="_blank" rel="noopener">此处</a>注册(Sign up)你的GitHub账户。</p><p> 2.进入已注册页面后，在右上角的“+”中点击New repository按钮。</p><p> 3.这时注意Owner名后面的Repository name 一定要是这样的格式： Owner名 + .git.io</p><p> 4.继续添加描述、点击public、点击添加.Redme文件。</p><p> 5.点击Create后就可以在你的主页看到你新建的项目了。建完的项目我们先搁置不动，接下来我们去购买属于自己的域名。</p><h3 id="购置域名"><a href="#购置域名" class="headerlink" title="购置域名"></a>购置域名</h3><p>点击<a href="https://wanwang.aliyun.com/domain/" title="阿里云官网" target="_blank" rel="noopener">此处</a>查询并购买你的域名。</p><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p> 1.点击<a href="https://dns.console.aliyun.com/#/dns/domainList" title="解析域名" target="_blank" rel="noopener">此处</a>来解析你的域名（同样我也已经解析过了，这里只会有解析设置）</p><p> 2.点击解析设置进入页面后点击新手引导设置，它会要求你输入IP</p><p> 3.这个IP需要我们打开cmd（win键 + R键），得到窗口后输 ping A.github.io     \注意A代表的是”Owner名”之前Git配置的时候设置过了。</p><p> 4.将得到IP输入到Domian页面的弹出框中后开始解析，等待解析完成域名配置完毕。</p><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><p> 1.在你的新建的hexo目录下的source文件夹下，新建一个CNAME.txt的文本文档。</p><p> 2.在文档中输入你的新买的域名（<a href="http://www.incredibleyou.cn）" target="_blank" rel="noopener">www.incredibleyou.cn）</a> ，保存后关闭。</p><p> 3.重命名你的.txt文件，将.txt文件的后缀去掉（文件会提示不可用，确定即可）。</p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>1.打开你的GitHub项目的主页，找到clone按钮，点击按钮以复制你的repository Url。</p><p>2.在你新建的hexo目录下找到_config.yml，打开，在最下面的deploy部分内容修改：</p><pre class=" language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>      \**注意每一列value前都要有一个空格**repository： https://github.com/zelin666/zelin666.github.io.git     \注意zelin666是我的名字，需要你填入你自己的名字branch: master</code></pre><h3 id="Git部署"><a href="#Git部署" class="headerlink" title="Git部署"></a>Git部署</h3><p>1.使用git部署，在你新建的hexo目录下空白处右键，点击Git Bash Here</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>2.执行之前的步骤:(hexo clean –&gt; hexo generate –&gt;hexo deploy)如下：</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><h3 id="配置GitHub并再次部署"><a href="#配置GitHub并再次部署" class="headerlink" title="配置GitHub并再次部署"></a>配置GitHub并再次部署</h3><p> 1.在你的GitHub页面点击进入你新建的项目，点击Settings进入设置页面。</p><p> 2.在GitHub Pages设置部分找到Custom domain，并在这里输入你购买的域名。</p><p> 3.使用git部署，在你新建的hexo目录下空白处右键，点击Git Bash Here</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p> 4.最后再次执行之前的步骤:(hexo clean –&gt; hexo generate –&gt;hexo deploy)</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><p> 5.你就可以看到你的博客了。</p><p> <strong>注意：每次修改配置信息或者其他必须要执行上面的步骤(g、d)，再去GitHub Pages设置部分找到Custom domain并在这里输入你购买的域名。才可以使得配置信息生效。</strong></p><p><strong>到此需要配置的工作就进行完了</strong><br><strong>搭建个人博客 HEXO＋Node.Js（三）将进一步讲解搭建完毕的一些基本问题与基本操作！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（四）</title>
      <link href="/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E5%9B%9B)/"/>
      <url>/2019/09/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-HEXO%EF%BC%8BNode-Js(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h2 id="本站采用Hexo-Theme-Matery主题"><a href="#本站采用Hexo-Theme-Matery主题" class="headerlink" title="本站采用Hexo-Theme-Matery主题"></a>本站采用Hexo-Theme-Matery主题</h2><h3 id="修改摘要-summary-在“前一篇-后一篇”卡片中”失效”的问题"><a href="#修改摘要-summary-在“前一篇-后一篇”卡片中”失效”的问题" class="headerlink" title="修改摘要(summary)在“前一篇/后一篇”卡片中”失效”的问题"></a>修改摘要(summary)在“前一篇/后一篇”卡片中”失效”的问题</h3><p>matery的文章目录是卡片式的。<br>在首页，若文章有摘要，则会显示摘要(summary)，若没有才会显示文章的前70个字。<br>但是在打开其中一篇文章时，最底部的“前一篇”和“后一篇”文章的卡片上却直接显示文章的前120个字，不论前/后一篇文章有没有摘要。我做出如下更改，使得在“前一篇”和“后一篇”文章的卡片上也同样显示摘要。<br>对/themes/hexo-theme-matery/layout/_partial/prev-next.ejs文件作如下更改：</p><p>第41行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.prev.summary <span class="token operator">&amp;&amp;</span> page.prev.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- page.prev.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.prev.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>第104行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.summary <span class="token operator">&amp;&amp;</span> page.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- page.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>第168行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.next.summary <span class="token operator">&amp;&amp;</span> page.next.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- page.next.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.next.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span></code></pre><h3 id="增加在文章页显示作者名的功能"><a href="#增加在文章页显示作者名的功能" class="headerlink" title="增加在文章页显示作者名的功能"></a>增加在文章页显示作者名的功能</h3><p>原来只会在文章卡片上显示作者名（并且是在没有分类的情况下），在文章内容页没有显示作者名。作如下修改使得在文章页显示：<br>在post-detail.ejs第37行左右，增加下列代码：</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"text-color"</span> align<span class="token operator">=</span>center style<span class="token operator">=</span><span class="token string">"font-size:large"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.author <span class="token operator">&amp;&amp;</span> page.author.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"far fa-square"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span> <span class="token operator">&lt;</span>%- page.author %<span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> %<span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"far fa-square"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span> <span class="token operator">&lt;</span>%- config.author %<span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="修改配色"><a href="#修改配色" class="headerlink" title="修改配色"></a>修改配色</h3><p>原来的主题虽然很好看，但是没有一个统一的主题色。可在/themes/hexo-theme-matery/source/css/matery.css中修改标题栏、菜单栏、各种标签背景的颜色，使主题颜色为Material的粉红色。感谢Material Design Colours提供的配色方案。</p><p><strong>到此搭建个人博客就告一段落啦~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个静态页面传递动态参数</title>
      <link href="/2019/09/04/%E4%B8%A4%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0/"/>
      <url>/2019/09/04/%E4%B8%A4%E4%B8%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。"><a href="#本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。" class="headerlink" title="本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。"></a>本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。</h3><p><strong>通过URL传参</strong></p><p><strong>思路：</strong></p><p>假定两个页面A和B，我们通过点击A页面的一个按钮链接跳转到B，A页面的链接上携带了一个参数，到B页面通过JS取到参数上携带的值。</p><p><strong>A页面代码：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.ABC.com/CCC?form.参数=100（值）"</span><span class="token operator">></span>跳转按钮<span class="token operator">&lt;</span>/a<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/form<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><strong>我们此时只需在B页面写个JS如下便可以取到参数：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> getUrlParam<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                var reg <span class="token operator">=</span> new RegExp<span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> + name + <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var r <span class="token operator">=</span> window.location.search.substr<span class="token punctuation">(</span>1<span class="token punctuation">)</span>.match<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> unescape<span class="token punctuation">(</span>r<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            var x1 <span class="token operator">=</span> getUrlParam<span class="token punctuation">(</span><span class="token string">'参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"Customer Focus"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> </code></pre><p><strong>这里我们使用到了正则表达式，匹配URL中的传过来的参数，取到了值便可以进行操作了，我做的操作是让id为c的进行点击操作</strong><br><strong>当然不要忘了应用的时候注意粗心大意的问题，例如link写完导入的JS文件。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello，This is Shmily~</title>
      <link href="/2019/09/02/hello-world/"/>
      <url>/2019/09/02/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-my-“home”，as-you-can-see-blog-is-a-part-of-my-life"><a href="#Welcome-to-my-“home”，as-you-can-see-blog-is-a-part-of-my-life" class="headerlink" title="Welcome to my “home”，as you can see,blog is a part of my life,"></a>Welcome to my “home”，as you can see,blog is a part of my life,</h2><h3 id="we-can-share-proposal-and-comment-just-like-cry-laugh-and-jump-in-our-life"><a href="#we-can-share-proposal-and-comment-just-like-cry-laugh-and-jump-in-our-life" class="headerlink" title="we can share,proposal and comment just like cry laugh and jump in our life."></a>we can share,proposal and comment just like cry laugh and jump in our life.</h3><h4 id="when-your-come-to-my-“home”"><a href="#when-your-come-to-my-“home”" class="headerlink" title="when your come to my “home”,"></a>when your come to my “home”,</h4><h4 id="I-will-raise-the-corners-of-my-mouth-and-say"><a href="#I-will-raise-the-corners-of-my-mouth-and-say" class="headerlink" title="I will raise the corners of my mouth and say"></a>I will raise the corners of my mouth and say</h4><h3 id="“Let-me-Shmily-see-how-much-i-love-you-”"><a href="#“Let-me-Shmily-see-how-much-i-love-you-”" class="headerlink" title="“Let me Shmily(see how much i love you!)”."></a>“Let me Shmily(see how much i love you!)”.</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
